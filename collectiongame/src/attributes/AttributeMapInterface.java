package attributes;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Collection;

import interfaces.SerializableConsumer;

/**
 * A Mapping between Attribute name's and and attributes of a particular type
 * @author David O'Sullivan
 *
 * @param <T> the type of the attribute
 */
interface AttributeMapInterface<T> {
	/**
	 * Writes this map to the provided ObjectOutputStream
	 * @param oos the ObjectOutputStream to write to
	 * @throws IOException
	 */
	void writeObject(final ObjectOutputStream oos) throws IOException;
	/**
	 * Copies all the data stored in this AttributeMapInterface<T> to the provided attribute Map
	 * @param attributeMap the AttributeMapInterface<T> to copy to
	 */
	void copyToNewMap(final AttributeMapInterface<T> attributeMap);
	/**
	 * Initializes data from an ObjectInputStream, must have written data out with writeObject
	 * @param ois the ObjectInputStream to get data from
	 * @throws ClassNotFoundException
	 * @throws IOException
	 */
	void readObject(final ObjectInputStream ois) throws ClassNotFoundException, IOException;
	/**
	 * Adds a new AttributeManagerObserver<T> to this map. 
	 * @param observer the observer to add
	 */
	void addNewObserver(final AttributeManagerObserver<T> observer);
	/**
	 * Generates a new attribute with the provided name
	 * @param name the name of the attribute
	 * @return the generated attribute
	 */
	Attribute<T> generateAttribute(final String name);
	/**
	 * Returns an  Attribute that was previously generated for this map with the provided name
	 * @param name the name of the attribute
	 * @return the  Attribute
	 */
	Attribute<T> getAttribute(final String name);
	/**
	 * Removes an Attribute that was previously generated for this map 
	 * @param name the name of the Attribute to remove
	 */
	void removeAttribute(final String name);
	/**
	 * Sets the value of an  Attribute that was already generated with the provided value
	 * @param name the name of the Attribute
	 * @param value the value to set the attribute to 
	 */
	void setAttributeValue(final String name, final T value);
	/**
	 * Sets the value of an Attribute that was already generated with the provided value
	 * @param name the name of the Attribute
	 * @param value the String representation of the value
	 */
	void setAttributeValue(final String name, final String value);
	/**
	 * Sets the doOnGeneration for this AttributeMap. Every Attribute<T> generated by this map will have
	 * doOnGeneration called on them after generation
	 * @param doOnGeneration what should be applies to a generated attribute
	 */
	void setDoOnGeneration(final SerializableConsumer<Attribute<T>> doOnGeneration);
	/**
	 * Returns all Attributes in this AttributeMap
	 * @return all Attributes in this AttributeMap
	 */
	Collection<Attribute<T>> getAllAttributes();
	/**
	 * Returns true if this AttributeMap contains an attribute of the specified name (i.e. it was generated)
	 * @param name the name of the attribute
	 * @return true if this AttributeMap contains an attribute of that name
	 */
	boolean containsAttribute(final String name);
}
